{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Practical Application III: Comparing Classifiers\n",
    "\n",
    "**Overview**: In this practical application, your goal is to compare the performance of the classifiers we encountered in this section, namely K Nearest Neighbor, Logistic Regression, Decision Trees, and Support Vector Machines.  We will utilize a dataset related to marketing bank products over the telephone.  \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Getting Started\n",
    "\n",
    "Our dataset comes from the UCI Machine Learning repository [link](https://archive.ics.uci.edu/ml/datasets/bank+marketing).  The data is from a Portugese banking institution and is a collection of the results of multiple marketing campaigns.  We will make use of the article accompanying the dataset [here](CRISP-DM-BANK.pdf) for more information on the data and features.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 1: Understanding the Data\n",
    "\n",
    "To gain a better understanding of the data, please read the information provided in the UCI link above, and examine the **Materials and Methods** section of the paper.  How many marketing campaigns does this data represent?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: According to the paper \"USING DATA MINING FOR BANK DIRECT MARKETING:\n",
    "AN APPLICATION OF THE CRISP-DM METHODOLOGY\" , this data represents the outcomes of 17 ad campaigns run by a Portuguese bank. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 2: Read in the Data\n",
    "\n",
    "Use pandas to read in the dataset `bank-additional-full.csv` and assign to a meaningful variable name."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('bank-additional-full.csv', sep = ';')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>month</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>...</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>emp.var.rate</th>\n",
       "      <th>cons.price.idx</th>\n",
       "      <th>cons.conf.idx</th>\n",
       "      <th>euribor3m</th>\n",
       "      <th>nr.employed</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>56</td>\n",
       "      <td>housemaid</td>\n",
       "      <td>married</td>\n",
       "      <td>basic.4y</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>may</td>\n",
       "      <td>mon</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>1.1</td>\n",
       "      <td>93.994</td>\n",
       "      <td>-36.4</td>\n",
       "      <td>4.857</td>\n",
       "      <td>5191.0</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>57</td>\n",
       "      <td>services</td>\n",
       "      <td>married</td>\n",
       "      <td>high.school</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>may</td>\n",
       "      <td>mon</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>1.1</td>\n",
       "      <td>93.994</td>\n",
       "      <td>-36.4</td>\n",
       "      <td>4.857</td>\n",
       "      <td>5191.0</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>37</td>\n",
       "      <td>services</td>\n",
       "      <td>married</td>\n",
       "      <td>high.school</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>may</td>\n",
       "      <td>mon</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>1.1</td>\n",
       "      <td>93.994</td>\n",
       "      <td>-36.4</td>\n",
       "      <td>4.857</td>\n",
       "      <td>5191.0</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>40</td>\n",
       "      <td>admin.</td>\n",
       "      <td>married</td>\n",
       "      <td>basic.6y</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>may</td>\n",
       "      <td>mon</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>1.1</td>\n",
       "      <td>93.994</td>\n",
       "      <td>-36.4</td>\n",
       "      <td>4.857</td>\n",
       "      <td>5191.0</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>56</td>\n",
       "      <td>services</td>\n",
       "      <td>married</td>\n",
       "      <td>high.school</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>telephone</td>\n",
       "      <td>may</td>\n",
       "      <td>mon</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>1.1</td>\n",
       "      <td>93.994</td>\n",
       "      <td>-36.4</td>\n",
       "      <td>4.857</td>\n",
       "      <td>5191.0</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   age        job  marital    education  default housing loan    contact  \\\n",
       "0   56  housemaid  married     basic.4y       no      no   no  telephone   \n",
       "1   57   services  married  high.school  unknown      no   no  telephone   \n",
       "2   37   services  married  high.school       no     yes   no  telephone   \n",
       "3   40     admin.  married     basic.6y       no      no   no  telephone   \n",
       "4   56   services  married  high.school       no      no  yes  telephone   \n",
       "\n",
       "  month day_of_week  ...  campaign  pdays  previous     poutcome emp.var.rate  \\\n",
       "0   may         mon  ...         1    999         0  nonexistent          1.1   \n",
       "1   may         mon  ...         1    999         0  nonexistent          1.1   \n",
       "2   may         mon  ...         1    999         0  nonexistent          1.1   \n",
       "3   may         mon  ...         1    999         0  nonexistent          1.1   \n",
       "4   may         mon  ...         1    999         0  nonexistent          1.1   \n",
       "\n",
       "   cons.price.idx  cons.conf.idx  euribor3m  nr.employed   y  \n",
       "0          93.994          -36.4      4.857       5191.0  no  \n",
       "1          93.994          -36.4      4.857       5191.0  no  \n",
       "2          93.994          -36.4      4.857       5191.0  no  \n",
       "3          93.994          -36.4      4.857       5191.0  no  \n",
       "4          93.994          -36.4      4.857       5191.0  no  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 3: Understanding the Features\n",
    "\n",
    "\n",
    "Examine the data description below, and determine if any of the features are missing values or need to be coerced to a different data type.\n",
    "\n",
    "\n",
    "```\n",
    "Input variables:\n",
    "# bank client data:\n",
    "1 - age (numeric)\n",
    "2 - job : type of job (categorical: 'admin.','blue-collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','unknown')\n",
    "3 - marital : marital status (categorical: 'divorced','married','single','unknown'; note: 'divorced' means divorced or widowed)\n",
    "4 - education (categorical: 'basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course','university.degree','unknown')\n",
    "5 - default: has credit in default? (categorical: 'no','yes','unknown')\n",
    "6 - housing: has housing loan? (categorical: 'no','yes','unknown')\n",
    "7 - loan: has personal loan? (categorical: 'no','yes','unknown')\n",
    "# related with the last contact of the current campaign:\n",
    "8 - contact: contact communication type (categorical: 'cellular','telephone')\n",
    "9 - month: last contact month of year (categorical: 'jan', 'feb', 'mar', ..., 'nov', 'dec')\n",
    "10 - day_of_week: last contact day of the week (categorical: 'mon','tue','wed','thu','fri')\n",
    "11 - duration: last contact duration, in seconds (numeric). Important note: this attribute highly affects the output target (e.g., if duration=0 then y='no'). Yet, the duration is not known before a call is performed. Also, after the end of the call y is obviously known. Thus, this input should only be included for benchmark purposes and should be discarded if the intention is to have a realistic predictive model.\n",
    "# other attributes:\n",
    "12 - campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact)\n",
    "13 - pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted)\n",
    "14 - previous: number of contacts performed before this campaign and for this client (numeric)\n",
    "15 - poutcome: outcome of the previous marketing campaign (categorical: 'failure','nonexistent','success')\n",
    "# social and economic context attributes\n",
    "16 - emp.var.rate: employment variation rate - quarterly indicator (numeric)\n",
    "17 - cons.price.idx: consumer price index - monthly indicator (numeric)\n",
    "18 - cons.conf.idx: consumer confidence index - monthly indicator (numeric)\n",
    "19 - euribor3m: euribor 3 month rate - daily indicator (numeric)\n",
    "20 - nr.employed: number of employees - quarterly indicator (numeric)\n",
    "\n",
    "Output variable (desired target):\n",
    "21 - y - has the client subscribed a term deposit? (binary: 'yes','no')\n",
    "```\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 4: Understanding the Task\n",
    "\n",
    "After examining the description and data, your goal now is to clearly state the *Business Objective* of the task.  State the objective below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 41188 entries, 0 to 41187\n",
      "Data columns (total 21 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   age             41188 non-null  int64  \n",
      " 1   job             41188 non-null  object \n",
      " 2   marital         41188 non-null  object \n",
      " 3   education       41188 non-null  object \n",
      " 4   default         41188 non-null  object \n",
      " 5   housing         41188 non-null  object \n",
      " 6   loan            41188 non-null  object \n",
      " 7   contact         41188 non-null  object \n",
      " 8   month           41188 non-null  object \n",
      " 9   day_of_week     41188 non-null  object \n",
      " 10  duration        41188 non-null  int64  \n",
      " 11  campaign        41188 non-null  int64  \n",
      " 12  pdays           41188 non-null  int64  \n",
      " 13  previous        41188 non-null  int64  \n",
      " 14  poutcome        41188 non-null  object \n",
      " 15  emp.var.rate    41188 non-null  float64\n",
      " 16  cons.price.idx  41188 non-null  float64\n",
      " 17  cons.conf.idx   41188 non-null  float64\n",
      " 18  euribor3m       41188 non-null  float64\n",
      " 19  nr.employed     41188 non-null  float64\n",
      " 20  y               41188 non-null  object \n",
      "dtypes: float64(5), int64(5), object(11)\n",
      "memory usage: 6.6+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 5: Engineering Features\n",
    "\n",
    "Now that you understand your business objective, we will build a basic model to get started.  Before we can do this, we must work to encode the data.  Using just the bank information features (columns 1 - 7), prepare the features and target column for modeling with appropriate encoding and transformations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Annik\\anaconda3\\python.exe\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "print(sys.executable)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Transformed Features Sample:\n",
      "        age  job_blue-collar  job_entrepreneur  job_housemaid  job_management  \\\n",
      "0  1.533034              0.0               0.0            1.0             0.0   \n",
      "1  1.628993              0.0               0.0            0.0             0.0   \n",
      "2 -0.290186              0.0               0.0            0.0             0.0   \n",
      "3 -0.002309              0.0               0.0            0.0             0.0   \n",
      "4  1.533034              0.0               0.0            0.0             0.0   \n",
      "\n",
      "   job_retired  job_self-employed  job_services  job_student  job_technician  \\\n",
      "0          0.0                0.0           0.0          0.0             0.0   \n",
      "1          0.0                0.0           1.0          0.0             0.0   \n",
      "2          0.0                0.0           1.0          0.0             0.0   \n",
      "3          0.0                0.0           0.0          0.0             0.0   \n",
      "4          0.0                0.0           1.0          0.0             0.0   \n",
      "\n",
      "   ...  education_illiterate  education_professional.course  \\\n",
      "0  ...                   0.0                            0.0   \n",
      "1  ...                   0.0                            0.0   \n",
      "2  ...                   0.0                            0.0   \n",
      "3  ...                   0.0                            0.0   \n",
      "4  ...                   0.0                            0.0   \n",
      "\n",
      "   education_university.degree  education_unknown  default_unknown  \\\n",
      "0                          0.0                0.0              0.0   \n",
      "1                          0.0                0.0              1.0   \n",
      "2                          0.0                0.0              0.0   \n",
      "3                          0.0                0.0              0.0   \n",
      "4                          0.0                0.0              0.0   \n",
      "\n",
      "   default_yes  housing_unknown  housing_yes  loan_unknown  loan_yes  \n",
      "0          0.0              0.0          0.0           0.0       0.0  \n",
      "1          0.0              0.0          0.0           0.0       0.0  \n",
      "2          0.0              0.0          1.0           0.0       0.0  \n",
      "3          0.0              0.0          0.0           0.0       0.0  \n",
      "4          0.0              0.0          0.0           0.0       1.0  \n",
      "\n",
      "[5 rows x 28 columns]\n",
      "\n",
      "Transformed Target Sample:\n",
      "[0 0 0 0 0]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.preprocessing import OneHotEncoder, StandardScaler, LabelEncoder\n",
    "\n",
    "# Load the dataset (assuming it's already loaded as per your previous code)\n",
    "# df = pd.read_csv('bank-additional-full.csv', sep=';')\n",
    "\n",
    "# Selecting the bank client data (features and target)\n",
    "features = df.iloc[:, 0:7]  # Selecting the first 7 columns as features\n",
    "target = df['y']  # This is our target column\n",
    "\n",
    "# Separate categorical and numerical features\n",
    "categorical_features = features.select_dtypes(include=['object']).columns\n",
    "numerical_features = features.select_dtypes(include=['int64', 'float64']).columns\n",
    "\n",
    "# Initialize onehot encoder\n",
    "ohe = OneHotEncoder(drop='first')\n",
    "# Apply One-Hot Encoding to categorical variables and convert to DataFrame\n",
    "encoded_features = ohe.fit_transform(features[categorical_features])  # This results in a sparse matrix\n",
    "features_encoded = pd.DataFrame(encoded_features.toarray(), columns=ohe.get_feature_names_out(categorical_features))\n",
    "features_encoded.index = features.index  # Align indices with original dataframe\n",
    "\n",
    "# Initialize StandardScaler for numerical features\n",
    "scaler = StandardScaler()\n",
    "# Apply StandardScaler to numerical features and convert to DataFrame\n",
    "features_scaled = scaler.fit_transform(features[numerical_features])\n",
    "features_scaled_df = pd.DataFrame(features_scaled, columns=numerical_features, index=features.index)\n",
    "\n",
    "# Combine encoded and scaled features\n",
    "final_features_df = pd.concat([features_scaled_df, features_encoded], axis=1)\n",
    "\n",
    "# Label Encoding for the target variable\n",
    "le = LabelEncoder()\n",
    "target_encoded = le.fit_transform(target)\n",
    "\n",
    "# Output the transformed features and target to prove changes\n",
    "print(\"Transformed Features Sample:\")\n",
    "print(final_features_df.head())\n",
    "print(\"\\nTransformed Target Sample:\")\n",
    "print(target_encoded[:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 6: Train/Test Split\n",
    "\n",
    "With your data prepared, split it into a train and test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training features shape: (28831, 28)\n",
      "Testing features shape: (12357, 28)\n",
      "Training target shape: (28831,)\n",
      "Testing target shape: (12357,)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(final_features_df, target_encoded, test_size=0.3, random_state=42)\n",
    "\n",
    "# Output the size of each set to verify the split\n",
    "print(f\"Training features shape: {X_train.shape}\")\n",
    "print(f\"Testing features shape: {X_test.shape}\")\n",
    "print(f\"Training target shape: {y_train.shape}\")\n",
    "print(f\"Testing target shape: {y_test.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 7: A Baseline Model\n",
    "\n",
    "Before we build our first model, we want to establish a baseline.  What is the baseline performance that our classifier should aim to beat?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Baseline Accuracy: 0.8876\n"
     ]
    }
   ],
   "source": [
    "from sklearn.dummy import DummyClassifier\n",
    "\n",
    "\n",
    "# Establish a baseline model that always predicts the most frequent class\n",
    "dummy_clf = DummyClassifier(strategy='most_frequent')\n",
    "dummy_clf.fit(X_train, y_train)\n",
    "baseline_accuracy = dummy_clf.score(X_test, y_test)\n",
    "\n",
    "print(f\"Baseline Accuracy: {baseline_accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 8: A Simple Model\n",
    "\n",
    "Use Logistic Regression to build a basic model on your data.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report (Test Set):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.87      0.47      0.61     10493\n",
      "         1.0       0.17      0.60      0.26      1864\n",
      "\n",
      "    accuracy                           0.49     12357\n",
      "   macro avg       0.52      0.53      0.43     12357\n",
      "weighted avg       0.76      0.49      0.56     12357\n",
      "\n",
      "Confusion Matrix (Test Set):\n",
      "[[4926 5567]\n",
      " [ 751 1113]]\n",
      "AUC-ROC Score (Test Set):\n",
      "0.5461548502189688\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# 'loan_yes' is the target\n",
    "X = final_features_df.drop(['loan_yes'], axis=1)  # Use all other columns as features\n",
    "y = final_features_df['loan_yes']  # Target variable\n",
    "\n",
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Apply SMOTE only on training data\n",
    "sm = SMOTE(random_state=42)\n",
    "X_train_res, y_train_res = sm.fit_resample(X_train, y_train)\n",
    "\n",
    "# Standardize features (important to do after resampling to not leak data from the test set)\n",
    "scaler = StandardScaler()\n",
    "X_train_res = scaler.fit_transform(X_train_res)\n",
    "X_test = scaler.transform(X_test)\n",
    "\n",
    "# Initialize and train the logistic regression model with class weight balanced\n",
    "lr = LogisticRegression(class_weight='balanced', random_state=42)\n",
    "lr.fit(X_train_res, y_train_res)\n",
    "\n",
    "# Predictions\n",
    "y_pred = lr.predict(X_test)\n",
    "\n",
    "# Evaluation\n",
    "print(\"Classification Report (Test Set):\")\n",
    "print(classification_report(y_test, y_pred))  # Notice here I used the numeric values directly\n",
    "\n",
    "print(\"Confusion Matrix (Test Set):\")\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "\n",
    "# AUC-ROC\n",
    "y_pred_proba = lr.predict_proba(X_test)[:, 1]\n",
    "print(\"AUC-ROC Score (Test Set):\")\n",
    "print(roc_auc_score(y_test, y_pred_proba))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 9: Score the Model\n",
    "\n",
    "What is the accuracy of your model?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This Logistic Regression model has sacrificed accuracy for increased recall of the minority class, which might be beneficial in scenarios where failing to detect the minority class is costly. However, for contexts where precision is also critical, the model may require further tuning or alternative approaches to balance the precision-recall trade-off more effectively."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 10: Model Comparisons\n",
    "\n",
    "Now, we aim to compare the performance of the Logistic Regression model to our KNN algorithm, Decision Tree, and SVM models.  Using the default settings for each of the models, fit and score each.  Also, be sure to compare the fit time of each of the models.  Present your findings in a `DataFrame` similar to that below:\n",
    "\n",
    "| Model | Train Time | Train Accuracy | Test Accuracy |\n",
    "| ----- | ---------- | -------------  | -----------   |\n",
    "|     |    |.     |.     |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model comparison:\n",
      "                 Model  Train Time  Train Accuracy  Test Accuracy\n",
      "0  Logistic Regression    0.046240        0.546386       0.488711\n",
      "1                  KNN    0.007414        0.728065       0.747916\n",
      "2        Decision Tree    0.178019        0.851004       0.722344\n",
      "3                  SVM   76.610506        0.593365       0.509752\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "\n",
    "X = final_features_df.drop(columns=['loan_yes'])  \n",
    "y = final_features_df['loan_yes']  \n",
    "\n",
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Apply SMOTE only on training data\n",
    "sm = SMOTE(random_state=42)\n",
    "X_train_res, y_train_res = sm.fit_resample(X_train, y_train)\n",
    "\n",
    "# Standardize features\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train_res)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Initialize the DataFrame to store results\n",
    "results_data = []\n",
    "\n",
    "# Define the models\n",
    "models = {\n",
    "    \"Logistic Regression\": LogisticRegression(max_iter=1000, class_weight='balanced', random_state=42),\n",
    "    \"KNN\": KNeighborsClassifier(),\n",
    "    \"Decision Tree\": DecisionTreeClassifier(),\n",
    "    \"SVM\": SVC()\n",
    "}\n",
    "\n",
    "# Loop through the models, train them, and collect their metrics\n",
    "for name, model in models.items():\n",
    "    start_time = time.time()\n",
    "    model.fit(X_train_scaled, y_train_res)  # Note: fit on resampled data\n",
    "    train_time = time.time() - start_time\n",
    "    \n",
    "    # Predictions and evaluations\n",
    "    y_pred = model.predict(X_test_scaled)\n",
    "    y_pred_mapped = np.where(y_pred == 1, \"yes\", \"no\")  # Map predicted class labels to original values\n",
    "    train_accuracy = accuracy_score(y_train_res, model.predict(X_train_scaled))  # Note: score on resampled data\n",
    "    test_accuracy = accuracy_score(y_test, y_pred)\n",
    "    \n",
    "    # Append the results\n",
    "    results_data.append([name, train_time, train_accuracy, test_accuracy])\n",
    "\n",
    "# Convert the results_data to a DataFrame\n",
    "results = pd.DataFrame(results_data, columns=[\"Model\", \"Train Time\", \"Train Accuracy\", \"Test Accuracy\"])\n",
    "\n",
    "# Display the results\n",
    "print(\"Model comparison:\")\n",
    "print(results)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model Simplification and Bias Evaluation in Marketing Campaigns Analysis\n",
    "In marketing campaign success analysis, the relevance and potential bias of features differ significantly from contexts like creditworthiness evaluation. For instance, while default history is less actionable in adtech, potentially introducing bias without practical utility, features like employment and marital status are invaluable for targeted advertising, offering direct insights into consumer behavior. While job type is theoretically a targetable feature for ads, the job types chosen for this campaign may introduce unnecessary bias and skew other results through overlapping semantic alignment (e.g. 'job_retired' could map too closely to the varibable 'age' thus confounding results, and job_housemaid may introduce unhelpful/biased associations with gender). \n",
    "\n",
    "Removing features such as job type and default history resulted in no meaningful change in metrics like RMSE. This simplification is beneficial as it makes the models more efficient without sacrificing accuracy. Importantly, in marketing contexts, maintaining features that allow for actionable insights and effective targetingâ€”such as previous campaign engagement and housing status statusâ€”aligns better with campaign goals, aiding in bias mitigation while focusing on aspects that enhance marketing strategies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model comparison:\n",
      "                 Model  Train Time  Train Accuracy  Test Accuracy\n",
      "0  Logistic Regression    0.042010        0.546386       0.488711\n",
      "1                  KNN    0.004997        0.728065       0.747916\n",
      "2        Decision Tree    0.168015        0.851004       0.722263\n",
      "3                  SVM   62.520248        0.593365       0.509752\n"
     ]
    }
   ],
   "source": [
    "# Drop specified columns\n",
    "columns_to_drop = ['default_unknown', 'default_yes', 'job_blue-collar', 'job_entrepreneur', 'job_housemaid', 'job_management', 'job_retired', 'job_self-employed', 'job_services', 'job_student', 'job_technician', 'job_unemployed', 'job_unknown']\n",
    "final_features_df_simplified = final_features_df.drop(columns=columns_to_drop)\n",
    "\n",
    "\n",
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Apply SMOTE only on training data\n",
    "sm = SMOTE(random_state=42)\n",
    "X_train_res, y_train_res = sm.fit_resample(X_train, y_train)\n",
    "\n",
    "# Standardize features\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train_res)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Initialize the DataFrame to store results\n",
    "results_data = []\n",
    "\n",
    "# Define the models\n",
    "models = {\n",
    "    \"Logistic Regression\": LogisticRegression(max_iter=1000, class_weight='balanced', random_state=42),\n",
    "    \"KNN\": KNeighborsClassifier(),\n",
    "    \"Decision Tree\": DecisionTreeClassifier(),\n",
    "    \"SVM\": SVC()\n",
    "}\n",
    "\n",
    "# Loop through the models, train them, and collect their metrics\n",
    "for name, model in models.items():\n",
    "    start_time = time.time()\n",
    "    model.fit(X_train_scaled, y_train_res)  # Note: fit on resampled data\n",
    "    train_time = time.time() - start_time\n",
    "    \n",
    "    # Predictions and evaluations\n",
    "    y_pred = model.predict(X_test_scaled)\n",
    "    y_pred_mapped = np.where(y_pred == 1, \"yes\", \"no\")  # Map predicted class labels to original values\n",
    "    train_accuracy = accuracy_score(y_train_res, model.predict(X_train_scaled))  # Note: score on resampled data\n",
    "    test_accuracy = accuracy_score(y_test, y_pred)\n",
    "    \n",
    "    # Append the results\n",
    "    results_data.append([name, train_time, train_accuracy, test_accuracy])\n",
    "\n",
    "# Convert the results_data to a DataFrame\n",
    "results = pd.DataFrame(results_data, columns=[\"Model\", \"Train Time\", \"Train Accuracy\", \"Test Accuracy\"])\n",
    "\n",
    "# Display the results\n",
    "print(\"Model comparison:\")\n",
    "print(results)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "#### Hyperparameter tuning and grid search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting GridSearchCV for KNN...\n",
      "Fitting 5 folds for each of 16 candidates, totalling 80 fits\n",
      "Best parameters for KNN: {'metric': 'manhattan', 'n_neighbors': 10, 'weights': 'uniform'}\n",
      "Best cross-validation score for KNN: 0.8859907949237655\n",
      "Test accuracy for best KNN: 0.8861374119932023\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "# KNN hyperparameters\n",
    "knn_params = {\n",
    "    'n_neighbors': [3, 5, 7, 10],\n",
    "    'weights': ['uniform', 'distance'],\n",
    "    'metric': ['euclidean', 'manhattan']\n",
    "}\n",
    "\n",
    "# Perform GridSearch for KNN\n",
    "print(\"Starting GridSearchCV for KNN...\")\n",
    "grid_knn = GridSearchCV(KNeighborsClassifier(), knn_params, cv=5, scoring='accuracy', verbose=1)\n",
    "grid_knn.fit(X_train_scaled, y_train)\n",
    "\n",
    "# Best KNN model evaluation\n",
    "best_knn = grid_knn.best_estimator_\n",
    "print(\"Best parameters for KNN:\", grid_knn.best_params_)\n",
    "print(\"Best cross-validation score for KNN:\", grid_knn.best_score_)\n",
    "print(\"Test accuracy for best KNN:\", accuracy_score(y_test, best_knn.predict(X_test_scaled)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting GridSearchCV for Decision Tree...\n",
      "Fitting 5 folds for each of 36 candidates, totalling 180 fits\n",
      "Best parameters for Decision Tree: {'max_depth': 5, 'min_samples_leaf': 5, 'min_samples_split': 20}\n",
      "Best cross-validation score for Decision Tree: 0.8868925971990936\n",
      "Test accuracy for best Decision Tree: 0.8877559278141944\n"
     ]
    }
   ],
   "source": [
    "# Decision Tree hyperparameters\n",
    "dt_params = {\n",
    "    'max_depth': [None, 5, 10, 15],\n",
    "    'min_samples_split': [2, 10, 20],\n",
    "    'min_samples_leaf': [1, 5, 10]\n",
    "}\n",
    "\n",
    "# Perform GridSearch for Decision Tree\n",
    "print(\"Starting GridSearchCV for Decision Tree...\")\n",
    "grid_dt = GridSearchCV(DecisionTreeClassifier(), dt_params, cv=5, scoring='accuracy', verbose=1)\n",
    "grid_dt.fit(X_train_scaled, y_train)\n",
    "\n",
    "# Best Decision Tree model evaluation\n",
    "best_dt = grid_dt.best_estimator_\n",
    "print(\"Best parameters for Decision Tree:\", grid_dt.best_params_)\n",
    "print(\"Best cross-validation score for Decision Tree:\", grid_dt.best_score_)\n",
    "print(\"Test accuracy for best Decision Tree:\", accuracy_score(y_test, best_dt.predict(X_test_scaled)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting GridSearchCV for Logistic Regression...\n",
      "Fitting 5 folds for each of 30 candidates, totalling 150 fits\n",
      "Best parameters for Logistic Regression: {'C': 0.01, 'max_iter': 100, 'solver': 'liblinear'}\n",
      "Best cross-validation score for Logistic Regression: 0.887204747958666\n",
      "Test accuracy for best Logistic Regression: 0.8875940762320952\n"
     ]
    }
   ],
   "source": [
    "# Logistic Regression hyperparameters\n",
    "lr_params = {\n",
    "    'C': [0.01, 0.1, 1, 10, 100],\n",
    "    'solver': ['liblinear', 'lbfgs'],\n",
    "    'max_iter': [100, 500, 1000]\n",
    "}\n",
    "\n",
    "# Perform GridSearch for Logistic Regression\n",
    "print(\"Starting GridSearchCV for Logistic Regression...\")\n",
    "grid_lr = GridSearchCV(LogisticRegression(), lr_params, cv=5, scoring='accuracy', verbose=1)\n",
    "grid_lr.fit(X_train_scaled, y_train)\n",
    "\n",
    "# Best Logistic Regression model evaluation\n",
    "best_lr = grid_lr.best_estimator_\n",
    "print(\"Best parameters for Logistic Regression:\", grid_lr.best_params_)\n",
    "print(\"Best cross-validation score for Logistic Regression:\", grid_lr.best_score_)\n",
    "print(\"Test accuracy for best Logistic Regression:\", accuracy_score(y_test, best_lr.predict(X_test_scaled)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Decision to Proceed with KNN\n",
    "We've chosen to proceed with the K-Nearest Neighbors (KNN) model for several reasons:\n",
    "\n",
    "KNN demonstrated significantly faster training times compared to other models, making it a more efficient choice for iterative processes and tuning. Despite its simplicity, KNN performed more consistently on train/test accuracy than any other model tested during the initial run. KNN is inherently simple and interpretable, making it easier to explain and understand the model's predictions. It offers a good balance between speed and performance, which we hope will assist in our our current analysis and future scalability.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Best KNN model based on your grid search results\n",
    "best_knn = KNeighborsClassifier(n_neighbors=grid_knn.best_params_['n_neighbors'],\n",
    "                                weights=grid_knn.best_params_['weights'],\n",
    "                                metric=grid_knn.best_params_['metric'])\n",
    "best_knn.fit(X_train_scaled, y_train)\n",
    "y_pred_knn = best_knn.predict(X_test_scaled)\n",
    "\n",
    "# Plotting the confusion matrix\n",
    "cm_knn = confusion_matrix(y_test, y_pred_knn)\n",
    "disp_knn = ConfusionMatrixDisplay(confusion_matrix=cm_knn)\n",
    "disp_knn.plot(cmap=plt.cm.Blues)\n",
    "plt.title('Confusion Matrix for KNN')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Rewriting to improve recognition of minority class\n",
    "The initial confusion matrix and classification report showed that the model was handling positive cases poorly. In other words, the reason the accuracy was good was because the overwhelming trend in actual results was negative outcomes, and the model prec This code will adjust the decision threshold for classification to potentially improve the recognition of the minority class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report for KNN with Threshold 0.4:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.97      0.93     10968\n",
      "           1       0.29      0.11      0.16      1389\n",
      "\n",
      "    accuracy                           0.87     12357\n",
      "   macro avg       0.59      0.54      0.55     12357\n",
      "weighted avg       0.83      0.87      0.84     12357\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report for KNN with Threshold 0.5:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.99      0.94     10968\n",
      "           1       0.36      0.05      0.09      1389\n",
      "\n",
      "    accuracy                           0.88     12357\n",
      "   macro avg       0.63      0.52      0.52     12357\n",
      "weighted avg       0.83      0.88      0.84     12357\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report for KNN with Threshold 0.6:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.99      0.94     10968\n",
      "           1       0.40      0.03      0.05      1389\n",
      "\n",
      "    accuracy                           0.89     12357\n",
      "   macro avg       0.65      0.51      0.49     12357\n",
      "weighted avg       0.83      0.89      0.84     12357\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report for KNN with Threshold 0.7:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      1.00      0.94     10968\n",
      "           1       0.39      0.01      0.02      1389\n",
      "\n",
      "    accuracy                           0.89     12357\n",
      "   macro avg       0.64      0.50      0.48     12357\n",
      "weighted avg       0.83      0.89      0.84     12357\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Fit the best KNN model based on grid search results\n",
    "best_knn = KNeighborsClassifier(n_neighbors=grid_knn.best_params_['n_neighbors'],\n",
    "                                weights=grid_knn.best_params_['weights'],\n",
    "                                metric=grid_knn.best_params_['metric'])\n",
    "best_knn.fit(X_train_scaled, y_train)\n",
    "\n",
    "# Make predictions (probabilities) for adjusting the decision threshold\n",
    "y_pred_prob = best_knn.predict_proba(X_test_scaled)[:, 1]\n",
    "\n",
    "# Function to apply different thresholds to the predictions\n",
    "def adjust_threshold(pred_probs, threshold):\n",
    "    return [1 if prob >= threshold else 0 for prob in pred_probs]\n",
    "\n",
    "# Experimenting with different thresholds\n",
    "thresholds = [0.4, 0.5, 0.6, 0.7]  \n",
    "for t in thresholds:\n",
    "    y_pred_adjusted = adjust_threshold(y_pred_prob, t)\n",
    "    cm_adjusted = confusion_matrix(y_test, y_pred_adjusted)\n",
    "    disp_adjusted = ConfusionMatrixDisplay(confusion_matrix=cm_adjusted)\n",
    "    disp_adjusted.plot(cmap=plt.cm.Purples)\n",
    "    plt.title(f'Confusion Matrix for KNN with Threshold {t}')\n",
    "    plt.show()\n",
    "\n",
    " #Print the classification report\n",
    "    print(f\"Classification Report for KNN with Threshold {t}:\\n\", classification_report(y_test, y_pred_adjusted))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report for KNN:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.99      0.94     10968\n",
      "           1       0.40      0.03      0.05      1389\n",
      "\n",
      "    accuracy                           0.89     12357\n",
      "   macro avg       0.65      0.51      0.49     12357\n",
      "weighted avg       0.83      0.89      0.84     12357\n",
      "\n"
     ]
    }
   ],
   "source": [
    "best_knn = KNeighborsClassifier(n_neighbors=grid_knn.best_params_['n_neighbors'],\n",
    "                                weights=grid_knn.best_params_['weights'],\n",
    "                                metric=grid_knn.best_params_['metric'])\n",
    "\n",
    "best_knn.fit(X_train_scaled, y_train) \n",
    "y_pred_knn = best_knn.predict(X_test_scaled)  \n",
    "\n",
    "report_knn = classification_report(y_test, y_pred_knn)\n",
    "print(\"Classification Report for KNN:\\n\", report_knn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report for KNN after resampling:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.85      0.88     10968\n",
      "           1       0.17      0.24      0.20      1389\n",
      "\n",
      "    accuracy                           0.78     12357\n",
      "   macro avg       0.54      0.55      0.54     12357\n",
      "weighted avg       0.82      0.78      0.80     12357\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Resample the training data\n",
    "smote = SMOTE(random_state=42)\n",
    "X_train_resampled, y_train_resampled = smote.fit_resample(X_train_scaled, y_train)\n",
    "\n",
    "# Fit the KNN model on the resampled training data\n",
    "best_knn_resampled = KNeighborsClassifier(n_neighbors=grid_knn.best_params_['n_neighbors'],\n",
    "                                          weights=grid_knn.best_params_['weights'],\n",
    "                                          metric=grid_knn.best_params_['metric'])\n",
    "\n",
    "best_knn_resampled.fit(X_train_resampled, y_train_resampled)  \n",
    "y_pred_knn_resampled = best_knn_resampled.predict(X_test_scaled)  \n",
    "\n",
    "# New classification report\n",
    "report_knn_resampled = classification_report(y_test, y_pred_knn_resampled)\n",
    "print(\"Classification Report for KNN after resampling:\\n\", report_knn_resampled)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Notes on KNN outcomes\n",
    "Probably by sheer chance, this model shows strong performance in identifying the negative class but performs poorly in identifying the positive class. This is a common scenario in imbalanced datasets where the model tends to predict the majority class well but struggles with the minority class.\r\n",
    "\r\n",
    "The very low recall (0.03) for the positive class suggests the model is missing the vast majority of actual positive instances, which could be problematic depending on the application. For example, if this model is used to identify individuals eligible for a loan, it would fail to identify most of the eligible individuals.\r\n",
    "\r\n",
    "The high overall accuracy can be misleading due to the imbalanced nature of the data. The low performance on the positive class needs addressing for the model to be useful in practice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report (Test Set):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.87      0.47      0.61     10493\n",
      "         1.0       0.17      0.60      0.26      1864\n",
      "\n",
      "    accuracy                           0.49     12357\n",
      "   macro avg       0.52      0.53      0.43     12357\n",
      "weighted avg       0.76      0.49      0.56     12357\n",
      "\n",
      "Confusion Matrix (Test Set):\n",
      "[[4926 5567]\n",
      " [ 751 1113]]\n",
      "AUC-ROC Score (Test Set):\n",
      "0.5461548502189688\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import roc_curve, auc, precision_recall_curve, average_precision_score\n",
    "\n",
    "\n",
    "# Ensure 'loan_yes' is only used as the target variable\n",
    "X = final_features_df.drop(columns=['loan_yes'])  # Dropping 'loan_yes' from features\n",
    "y = final_features_df['loan_yes']  # Setting 'loan_yes' as the target\n",
    "\n",
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Apply SMOTE only on training data\n",
    "sm = SMOTE(random_state=42)\n",
    "X_train_res, y_train_res = sm.fit_resample(X_train, y_train)\n",
    "\n",
    "# Standardize features\n",
    "scaler = StandardScaler()\n",
    "X_train_res_scaled = scaler.fit_transform(X_train_res)\n",
    "X_test_scaled = scaler.transform(X_test)  # Notice here we only transform, not fit\n",
    "\n",
    "# Initialize and train the logistic regression model with class weight balanced\n",
    "lr = LogisticRegression(class_weight='balanced', random_state=42, max_iter=1000)\n",
    "lr.fit(X_train_res_scaled, y_train_res)  # Fit on the resampled and scaled training data\n",
    "\n",
    "# Predictions\n",
    "y_pred = lr.predict(X_test_scaled)  # Predict on the scaled test data\n",
    "\n",
    "# Evaluation\n",
    "print(\"Classification Report (Test Set):\")\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "print(\"Confusion Matrix (Test Set):\")\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "\n",
    "# AUC-ROC\n",
    "y_pred_proba = lr.predict_proba(X_test_scaled)[:, 1]  # Get probability scores for ROC\n",
    "print(\"AUC-ROC Score (Test Set):\")\n",
    "print(roc_auc_score(y_test, y_pred_proba))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Trying Ensemble Methods\n",
    "Given the poor performance of KNN on identifying positive cases despite adjusting our techniques, we employed an ensemble method Random Forest Classifier to see if it could identify true positives more reliably."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report for Random Forest:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.85      0.78      0.81     10493\n",
      "         1.0       0.16      0.24      0.19      1864\n",
      "\n",
      "    accuracy                           0.70     12357\n",
      "   macro avg       0.51      0.51      0.50     12357\n",
      "weighted avg       0.75      0.70      0.72     12357\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay\n",
    "\n",
    "\n",
    "# Ensure 'loan_yes' is only used as the target variable\n",
    "X = final_features_df.drop(columns=['loan_yes'])  # Dropping 'loan_yes' from features\n",
    "y = final_features_df['loan_yes']  # Setting 'loan_yes' as the target\n",
    "\n",
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Standardize features\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Apply SMOTE only on training data to balance the dataset\n",
    "smote = SMOTE(random_state=42)\n",
    "X_train_resampled, y_train_resampled = smote.fit_resample(X_train_scaled, y_train)\n",
    "\n",
    "# Initialize the Random Forest classifier\n",
    "rf_classifier = RandomForestClassifier(n_estimators=100,  # Number of trees in the forest\n",
    "                                       random_state=42,  # Random seed for reproducibility\n",
    "                                       class_weight='balanced')  # Adjust weights inversely proportional to class frequencies\n",
    "\n",
    "# Fit the model on the resampled training data\n",
    "rf_classifier.fit(X_train_resampled, y_train_resampled)\n",
    "\n",
    "# Make predictions on the test data\n",
    "y_pred_rf = rf_classifier.predict(X_test_scaled)\n",
    "\n",
    "# Generate and print the classification report\n",
    "report_rf = classification_report(y_test, y_pred_rf)\n",
    "print(\"Classification Report for Random Forest:\\n\", report_rf)\n",
    "\n",
    "# Plot the confusion matrix\n",
    "cm_rf = confusion_matrix(y_test, y_pred_rf)\n",
    "disp_rf = ConfusionMatrixDisplay(confusion_matrix=cm_rf)\n",
    "disp_rf.plot(cmap=plt.cm.Oranges)\n",
    "plt.title('Confusion Matrix for Random Forest')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Notes on Random Forest Classifier Outcomes\n",
    "\n",
    "While the Random Forest model seems to provide a better balance and higher overall accuracy over KNN, it does so with trade-offs, particularly in identifying 'Loan' instances. If identifying 'Loan' instances is crucial, adjustments or other models might need to be considered. If overall accuracy and the correct identification of 'No Loan' instances are more critical, the Random Forest might be more suitable. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Testing XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report for XGBoost:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "     Class 0       0.92      0.45      0.61     10968\n",
      "     Class 1       0.14      0.70      0.23      1389\n",
      "\n",
      "    accuracy                           0.48     12357\n",
      "   macro avg       0.53      0.57      0.42     12357\n",
      "weighted avg       0.83      0.48      0.56     12357\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from xgboost import XGBClassifier\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(final_features_df, target_encoded, test_size=0.3, random_state=42)\n",
    "\n",
    "# Standardize features\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Apply SMOTE to balance the dataset\n",
    "smote = SMOTE(random_state=42)\n",
    "X_train_resampled, y_train_resampled = smote.fit_resample(X_train_scaled, y_train)\n",
    "\n",
    "# Initialize XGBoost classifier with scale_pos_weight parameter\n",
    "# This parameter is important for imbalanced datasets; it gives more weight to the minority class.\n",
    "scale_pos_weight = sum(y_train == 0) / sum(y_train == 1)\n",
    "xgb_classifier = XGBClassifier(scale_pos_weight=scale_pos_weight, eval_metric='logloss')\n",
    "\n",
    "# Fit the XGBoost model on the resampled training data\n",
    "xgb_classifier.fit(X_train_resampled, y_train_resampled)\n",
    "\n",
    "# Make predictions on the test data\n",
    "y_pred_xgb = xgb_classifier.predict(X_test_scaled)\n",
    "\n",
    "# Generate and print the classification report\n",
    "report_xgb = classification_report(y_test, y_pred_xgb, target_names=['Class 0', 'Class 1'])\n",
    "print(\"Classification Report for XGBoost:\\n\", report_xgb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Ensemble Voting: Going for the best of both worlds (unsuccessfully)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report (Test Set):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.86      0.63      0.72     10493\n",
      "         1.0       0.16      0.40      0.23      1864\n",
      "\n",
      "    accuracy                           0.59     12357\n",
      "   macro avg       0.51      0.52      0.48     12357\n",
      "weighted avg       0.75      0.59      0.65     12357\n",
      "\n",
      "Confusion Matrix (Test Set):\n",
      "[[6593 3900]\n",
      " [1113  751]]\n",
      "AUC-ROC Score (Test Set):\n",
      "0.5314814157731969\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n",
    "\n",
    "X = final_features_df.drop(columns=['loan_yes'])\n",
    "y = final_features_df['loan_yes']\n",
    "\n",
    "# Split data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Apply SMOTE\n",
    "sm = SMOTE(random_state=42)\n",
    "X_train_res, y_train_res = sm.fit_resample(X_train, y_train)\n",
    "\n",
    "# Standardize features\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train_res)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Initialize models\n",
    "rf = RandomForestClassifier(n_estimators=100, random_state=42, class_weight='balanced')\n",
    "xgb = XGBClassifier(scale_pos_weight=(y_train.size - y_train.sum()) / y_train.sum(), eval_metric='logloss')\n",
    "\n",
    "# Create a voting classifier\n",
    "voting_clf = VotingClassifier(estimators=[('rf', rf), ('xgb', xgb)], voting='soft')\n",
    "voting_clf.fit(X_train_scaled, y_train_res)\n",
    "\n",
    "# Make predictions\n",
    "y_pred_voting = voting_clf.predict(X_test_scaled)\n",
    "y_pred_proba_voting = voting_clf.predict_proba(X_test_scaled)[:, 1]  # For ROC-AUC\n",
    "\n",
    "# Print classification report and confusion matrix\n",
    "print(\"Classification Report (Test Set):\")\n",
    "print(classification_report(y_test, y_pred_voting))\n",
    "print(\"Confusion Matrix (Test Set):\")\n",
    "print(confusion_matrix(y_test, y_pred_voting))\n",
    "\n",
    "# Compute ROC-AUC\n",
    "from sklearn.metrics import roc_auc_score\n",
    "print(\"AUC-ROC Score (Test Set):\")\n",
    "print(roc_auc_score(y_test, y_pred_proba_voting))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Disappointing AUC-ROC score - Scarcely better than random chance\n",
    "Back to the drawing board, trying something new. This time using one-class classification, which supposedly works better for imbalanced datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree Classification Report (Test Set):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.85      0.82      0.83     10493\n",
      "         1.0       0.16      0.20      0.18      1864\n",
      "\n",
      "    accuracy                           0.72     12357\n",
      "   macro avg       0.51      0.51      0.51     12357\n",
      "weighted avg       0.75      0.72      0.73     12357\n",
      "\n",
      "Confusion Matrix (Test Set):\n",
      "[[8556 1937]\n",
      " [1492  372]]\n",
      "AUC-ROC Score (Test Set):\n",
      "0.5221906572499385\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Data Preparation\n",
    "X = final_features_df.drop(columns=['loan_yes'])\n",
    "y = final_features_df['loan_yes']\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Apply SMOTE for handling imbalance\n",
    "smote = SMOTE(random_state=42)\n",
    "X_train_res, y_train_res = smote.fit_resample(X_train, y_train)\n",
    "\n",
    "# Scale the features\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train_res)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Train a Decision Tree model\n",
    "dt_model = DecisionTreeClassifier(random_state=42, class_weight='balanced')\n",
    "dt_model.fit(X_train_scaled, y_train_res)\n",
    "\n",
    "# Make predictions\n",
    "y_pred_dt = dt_model.predict(X_test_scaled)\n",
    "y_pred_proba_dt = dt_model.predict_proba(X_test_scaled)[:, 1]  # Probability for ROC-AUC\n",
    "\n",
    "# Evaluate the model\n",
    "print(\"Decision Tree Classification Report (Test Set):\")\n",
    "print(classification_report(y_test, y_pred_dt))\n",
    "print(\"Confusion Matrix (Test Set):\")\n",
    "print(confusion_matrix(y_test, y_pred_dt))\n",
    "print(\"AUC-ROC Score (Test Set):\")\n",
    "print(roc_auc_score(y_test, y_pred_proba_dt))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Adding PCA to try and get better results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "pca = PCA(random_state=42)\n",
    "X_train_pca = pca.fit_transform(X_train_scaled)\n",
    "X_test_pca = pca.transform(X_test_scaled)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Explained Variance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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AEoGxQmFcjolQ09/u12SNKRjTXVtHGxyIgAAAKDkOEVxmjlzpiIiIuTl5aX27dtr06ZNee778ccf64YbblClSpVUqVIlde3aNd/9ce3sdkNjv92uMxcy1TDET+Nua2R2JAAAAKBEmV6c5s+frzFjxmjChAnaunWrWrRooe7du+vUqVNX3H/VqlUaMGCAVq5cqfXr1yssLEzdunXTiRMnSjh5+TF73WGt2Xdanm4uendAS3m5u5odCQAAAChRphen6dOna/jw4Ro2bJgaN26sWbNmycfHR7Nnz77i/l9//bVGjBihyMhINWzYUJ988onsdruWL19ewsnLh10nkjRtSbQkafwdjVUv2M/kRAAAAEDJczPzyTMzM7VlyxaNGzcue5uLi4u6du2q9evXF+ox0tLSZLVaFRgYeMX7MzIylJGRkX07OTlZkmS1WmW1Wq8hfdG4nMEZsvyv1IwsPT53q6w2Q7c2ClLfVqFOmbOscuaxAXMxNpAfxgfywthAfsrr+HDk+zW1OJ05c0Y2m03BwTkXGggODlZ0dHShHuO5555TtWrV1LVr1yveP2XKFE2cODHX9qVLl8rHx8fx0MVk2bJlZkfIZe4BFx0+66IAD0M3Vzip3347aXakcskZxwacA2MD+WF8IC+MDeSnvI2PtLS0Qu9ranG6VlOnTtU333yjVatWycvryktjjxs3TmPGjMm+nZycnP25KH9//5KKmier1aply5bp1ltvlbu7u9lxsi3aGa+N63fIYpHeu7+t2te68hk9FB9nHRswH2MD+WF8IC+MDeSnvI6Py7PRCsPU4lSlShW5uroqISEhx/aEhASFhITke+wbb7yhqVOn6o8//lDz5s3z3M/T01Oenp65tru7uzvVoHCmPMcS0zT+5z2SpFE319X19Vl63EzONDbgXBgbyA/jA3lhbCA/5W18OPK9mro4hIeHh1q3bp1jYYfLCz107Ngxz+Nee+01vfzyy1qyZInatGlTElHLjSybXU9+s00pGVlqFR6gJ7vUMzsSAAAAYDrTp+qNGTNGQ4YMUZs2bdSuXTvNmDFDqampGjZsmCRp8ODBql69uqZMmSJJmjZtml588UXNnTtXERERio+PlyT5+vrK19fXtO+jrHhn+X5tjT0vP083vd2/pdxcTV94EQAAADCd6cWpX79+On36tF588UXFx8crMjJSS5Ys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2Na2bVtjxIgR2bdbtGhhTJgwIc/H2LhxoyHJ+OGHH/J9rqVLlxqurq5GbGxs9rbdu3cbkoxNmzYZhnHp5+rj42MkJydn79O9e3cjIiIi189xypQp2bclGY8++miO52vfvr3x2GOPGYZhGB999JFRqVIl48KFC9n3L1q0yHBxcTHi4+MNw/j//15ZWVnZ+9x3331Gv379DMMwjKNHjxqurq7GiRMncjxPly5djHHjxhmGYRifffaZIck4cOBA9v0zZ840goODs2//c4xd9vjjjxu33HKLYbfb8/z5AUBZxRknACjlpk2bps8//zz7rMXVaNKkiVxc/v+fhODgYDVr1iz7tqurqypXrqxTp07lOK5jx47ZX7u5ualNmzbZObZv366VK1fK19c3+0/Dhg0lXTpbc1nr1q3zzZacnKyTJ0+qU6dOObZ36tTJoe/ZMIxC7bd3716FhYUpLCwse1vjxo0VEBCQ4/kiIiLk5+eXfTs4OFiNGzfO9XPM72d2+fblx927d69atGiR44xYp06dZLfbFRMTk72tSZMmcnV1zb4dGhqa/Tw7d+6UzWZT/fr1c/zsV69enePn7uPjozp16lzxMfIydOhQRUVFqUGDBnriiSe0dOnSfPcHgLLEzewAAIBr07lzZ3Xv3l3jxo3T0KFDc9zn4uKSqzD887Mwl7m7u+e4bbFYrrjNbrcXOteFCxfUq1cvTZs2Ldd9oaGh2V9fadpccahXr54sFouio6OL5PGK42d2Lc99+XkuXLggV1dXbdmyJUe5kiRfX998H6OgctmqVSsdPnxYv/32m/744w/17dtXXbt2zfU5LQAoizjjBABlwNSpU/XLL79o/fr1ObZXrVpV8fHxOd4QF+W1l/65oEJWVpa2bNmiRo0aSbr0Jnv37t2KiIhQ3bp1c/xxpCz5+/urWrVqWrduXY7t69atU+PGjQv9OIGBgerevbtmzpyp1NTUXPefP39ektSoUSMdO3ZMx44dy75vz549On/+vEPPl5d//swu3778M2vUqJG2b9+eI9+6devk4uKiBg0aFOrxW7ZsKZvNplOnTuX6uYeEhBQ6p4eHh2w2W67t/v7+6tevnz7++GPNnz9f33//vRITEwv9uABQWlGcAKAMaNasmQYNGqR33nknx/abbrpJp0+f1muvvaaDBw9q5syZ+u2334rseWfOnKkff/xR0dHRGjlypM6dO6cHH3xQkjRy5EglJiZqwIAB+vvvv3Xw4EH9/vvvGjZs2BXfkOfnmWee0bRp0zR//nzFxMTo+eefV1RUlJ588kmH89psNrVr107ff/+99u/fr7179+qdd97JnkLXtWvX7J/n1q1btWnTJg0ePFg33nij2rRp49DzXcm3336r2bNna9++fZowYYI2bdqUvfjDoEGD5OXlpSFDhmjXrl1auXKlHn/8cT3wwAMKDg4u1OPXr19fgwYN0uDBg/XDDz/o8OHD2rRpk6ZMmaJFixYVOmdERIR27NihmJgYnTlzRlarVdOnT9e8efMUHR2tffv26dtvv1VISEj2whoAUJZRnACgjJg0aVKuaWGNGjXS+++/r5kzZ6pFixbatGnTFVecu1pTp07V1KlT1aJFC61du1YLFy5UlSpVJCn7LJHNZlO3bt3UrFkzjR49WgEBATk+B1QYTzzxhMaMGaOxY8eqWbNmWrJkiRYuXKh69eo59Di1a9fW1q1bdfPNN2vs2LFq2rSpbr31Vi1fvlwffPCBpEtT1n7++WdVqlRJnTt3VteuXVW7dm3Nnz/foefKy8SJE/XNN9+oefPm+uKLLzRv3rzsM1k+Pj76/ffflZiYqLZt2+ree+9Vly5d9N577zn0HJ999pkGDx6ssWPHqkGDBurdu7f+/vtvhYeHF/oxhg8frgYNGqhNmzaqWrWq1q1bJz8/P7322mtq06aN2rZtqyNHjmjx4sUO//cEgNLIYhT207IAAOCaWCwW/fjjj+rdu7fZUQAADuJXRAAAAABQAIoTAAAAABSA5cgBACghzI4HgNKLM04AAAAAUACKEwAAAAAUgOIEAAAAAAWgOAEAAABAAShOAAAAAFAAihMAAAAAFIDiBAAAAAAFoDgBAAAAQAEoTgAAAABQgP8DebBluIn0Bb8AAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1000x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(10, 7))\n",
    "plt.plot(np.cumsum(pca.explained_variance_ratio_))\n",
    "plt.xlabel('Number of Components')\n",
    "plt.ylabel('Cumulative Explained Variance')\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of X_train_pca_15: (28831, 15)\n",
      "Shape of y_train: (28831,)\n",
      "Random Forest with PCA (15 components) Classification Report (Test Set):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.85      0.96      0.90     10493\n",
      "         1.0       0.15      0.04      0.07      1864\n",
      "\n",
      "    accuracy                           0.82     12357\n",
      "   macro avg       0.50      0.50      0.48     12357\n",
      "weighted avg       0.74      0.82      0.77     12357\n",
      "\n",
      "Confusion Matrix (Test Set):\n",
      "[[10054   439]\n",
      " [ 1786    78]]\n",
      "Accuracy (Test Set):\n",
      "0.8199401149146233\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Re-confirming train-test split to ensure consistency\n",
    "X_train, X_test, y_train, y_test = train_test_split(final_features_df.drop(columns=['loan_yes']), final_features_df['loan_yes'], test_size=0.3, random_state=42)\n",
    "\n",
    "# Re-scaling based on the correct train-test split\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Applying PCA with 15 components based on the correctly scaled data\n",
    "pca_15 = PCA(n_components=15, random_state=42)\n",
    "X_train_pca_15 = pca_15.fit_transform(X_train_scaled)  # Correct scaled train data\n",
    "X_test_pca_15 = pca_15.transform(X_test_scaled)        # Correct scaled test data\n",
    "\n",
    "# Double-check shapes after transformation\n",
    "print(f'Shape of X_train_pca_15: {X_train_pca_15.shape}')\n",
    "print(f'Shape of y_train: {y_train.shape}')\n",
    "\n",
    "# If shapes are consistent, proceed with Random Forest training\n",
    "if X_train_pca_15.shape[0] == y_train.shape[0]:\n",
    "    from sklearn.ensemble import RandomForestClassifier\n",
    "    from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
    "\n",
    "    rf_model = RandomForestClassifier(random_state=42)\n",
    "    rf_model.fit(X_train_pca_15, y_train)  # Using corrected training data\n",
    "\n",
    "    # Predict and evaluate\n",
    "    y_pred_rf = rf_model.predict(X_test_pca_15)\n",
    "    print(\"Random Forest with PCA (15 components) Classification Report (Test Set):\")\n",
    "    print(classification_report(y_test, y_pred_rf))\n",
    "    print(\"Confusion Matrix (Test Set):\")\n",
    "    print(confusion_matrix(y_test, y_pred_rf))\n",
    "    print(\"Accuracy (Test Set):\")\n",
    "    print(accuracy_score(y_test, y_pred_rf))\n",
    "else:\n",
    "    print(\"There is still a mismatch in the number of samples between X_train_pca_15 and y_train.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(28831, 27) (28831,)\n",
      "(12357, 27) (12357,)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape, y_train.shape)\n",
    "print(X_test.shape, y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Considering only call duration and target variable\n",
    "\n",
    "The paper that accompanied this exercise noted that call duration was a key predictive feature for whether or not the campaign achieved a conversion (a loan was issued).  Since multivariate analysis is falling short, we chose to see if we could reproduce the results of the paper based on this one factor at least."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "duration    0\n",
      "y           0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check for missing values in 'duration' and 'y'\n",
    "missing_values = df[['duration', 'y']].isnull().sum()\n",
    "print(missing_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert 'y' from yes/no to 1/0\n",
    "df['y'] = df['y'].map({'yes': 1, 'no': 0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count    41188.000000\n",
      "mean       258.285010\n",
      "std        259.279249\n",
      "min          0.000000\n",
      "25%        102.000000\n",
      "50%        180.000000\n",
      "75%        319.000000\n",
      "max       4918.000000\n",
      "Name: duration, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Check the statistics of 'duration'\n",
    "print(df['duration'].describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique values in 'y' before mapping: ['no' 'yes']\n",
      "Unique values in 'y' after mapping: [0 1]\n",
      "Missing values in 'y' after mapping: 0\n"
     ]
    }
   ],
   "source": [
    "# Load the dataset\n",
    "df = pd.read_csv('bank-additional-full.csv', sep=';')\n",
    "\n",
    "# Check unique values before conversion\n",
    "print(\"Unique values in 'y' before mapping:\", df['y'].unique())\n",
    "\n",
    "# Convert 'y' from 'yes'/'no' to 1/0\n",
    "df['y'] = df['y'].map({'yes': 1, 'no': 0})\n",
    "\n",
    "# Check unique values after conversion\n",
    "print(\"Unique values in 'y' after mapping:\", df['y'].unique())\n",
    "\n",
    "# Check for missing values after mapping\n",
    "missing_values_after_mapping = df['y'].isnull().sum()\n",
    "print(\"Missing values in 'y' after mapping:\", missing_values_after_mapping)\n",
    "\n",
    "# If there are missing values, it means there were values other than 'yes' or 'no'\n",
    "if missing_values_after_mapping > 0:\n",
    "    # Display rows where 'y' is NaN to understand what went wrong\n",
    "    print(df[df['y'].isnull()])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.99      0.94     10968\n",
      "           1       0.62      0.16      0.26      1389\n",
      "\n",
      "    accuracy                           0.89     12357\n",
      "   macro avg       0.76      0.58      0.60     12357\n",
      "weighted avg       0.87      0.89      0.87     12357\n",
      "\n",
      "Confusion Matrix:\n",
      "[[10827   141]\n",
      " [ 1162   227]]\n",
      "AUC-ROC Score:\n",
      "0.8227574397986892\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_curve, auc\n",
    "\n",
    "X = df[['duration']]\n",
    "y = df['y']\n",
    "\n",
    "# Splitting the dataset into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Creating and training the logistic regression model\n",
    "model = LogisticRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Making predictions\n",
    "y_pred = model.predict(X_test)\n",
    "y_pred_proba = model.predict_proba(X_test)[:, 1]  # Probability estimates for AUC-ROC\n",
    "\n",
    "# Evaluating the model\n",
    "print(\"Classification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n",
    "print(\"Confusion Matrix:\")\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(\"AUC-ROC Score:\")\n",
    "print(roc_auc_score(y_test, y_pred_proba))\n",
    "\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "\n",
    "# Plotting the ROC curve\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)\n",
    "plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Receiver Operating Characteristic (ROC) - Call Duration vs Accepted Loan')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion\n",
    "#### Comparing Classifiers for Portuguese Banking Data\r\n",
    "In this practical application assignment, we explored various classifiers to predict the likelihood of individuals obtaining a loan following exposure to a marketing campaign, using a dataset derived from Portuguese banking data. The data demonstrated significant class imbalance, characterized by only around 11% of instances belonging to the positive class (loan yes).\r\n",
    "\r\n",
    "Initially, we experimented with multiple machine learning techniques to tackle class imbalance and enhance the predictive performance of our classifiers. These methods included class weight adjustments, Synthetic Minority Over-sampling Technique (SMOTE), feature reduction via Principal Component Analysis (PCA), and trials with diverse algorithms such as Random Forest, Gradient Boosting, SVM, Decision Trees, and Logistic Regression. We also explored ensemble strategies, including stacking and voting, aiming to combine the strengths of various models.\r\n",
    "\r\n",
    "Despite these efforts, the models consistently underperformed, failing to predict the target variable effectively, as indicated by AUC-ROC scores that barely surpassed those of random classifiers. This outcome underscored a potential inadequacy in the dataset's features for accurately predicting loan acquisition.\r\n",
    "\r\n",
    "Interestingly, towards the end of our analysis, we focused on call duration as a singular variable, influenced by literature suggesting its strong correlation with loan acceptance. Surprisingly, this approach yielded comparatively better results than the multivariate analyses. However, while call duration might hint at potential loan acceptance, it does not serve the ad tech industry's preemptive needs â€” identifying likely customers before reaching the call phase.\r\n",
    "\r\n",
    "Our exploration underscores a crucial limitation: the absence of features enabling early identification of prospective customers, which remains essential for targeted advertising and marketing strategies. This challenge highlights the need for additional research or data collection to uncover factors that can more accurately and timely predict loan acquisition tendencies among potential customers.utloan customers."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Given the exhaustive exploration of various classifiers and techniques, we recommend the following refined next steps for the client (the bank):\n",
    "\n",
    "Collaborate closely with banking domain experts to gain deeper insights into the factors that influence loan acquisition. Leverage their knowledge to identify and engineer new features that capture the underlying patterns and characteristics of individuals likely to obtain a loan. This may involve incorporating additional financial metrics, behavioral data, or customer interaction history.\n",
    "  \n",
    "Consider collecting a larger and more diverse dataset that encompasses a broader range of customer profiles and behaviors. This expanded dataset may provide a more comprehensive representation of the target population and potentially uncover new patterns or relationships that can enhance the predictive power of the models.\n",
    "  \n",
    "While we have exhaustively investigated various traditional machine learning algorithms, it may be worthwhile to explore the application of neural networks, particularly deep learning architectures. Deep neural networks have shown promising results in handling complex and high-dimensional data, and they may be able to capture intricate patterns and interactions that are not easily discernible by other methods.\n",
    "  \n",
    "Given the regulatory and ethical considerations in the banking industry, it is crucial to prioritize the interpretability of the predictive models. Consider using techniques such as feature importance analysis, partial dependence plots, or SHAP (SHapley Additive exPlanations) to gain insights into the key factors driving loan acquisition. This interpretability can help the bank make more informed and transparent decisions regarding its marketing strategies.\n",
    "  \n",
    "Implement a robust system for monitoring the performance of the predictive models in real-time. Regularly assess the effectiveness of the marketing campaigns and collect feedback from customers to identify areas for improvement. This iterative process of monitoring, feedback, and refinement can help the bank adapt its strategies and optimize its advertising efforts over time.\n",
    "\n",
    "In summary, despite the extensive exploration of various classifiers and techniques, the predictive performance for loan acquisition based on the given Portuguese banking data remained suboptimal. Moving forward, the bank should focus on collaborating with domain experts, expanding data collection, exploring neural networks, prioritizing model interpretability, and implementing continuous monitoring and feedback mechanisms. By adopting these strategies, the bank can work towards developing more effective and targeted advertising campaigns to identify and attract potential loan customers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (bankingenv)",
   "language": "python",
   "name": "bankingenv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
